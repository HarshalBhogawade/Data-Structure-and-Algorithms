/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        //brute may be better
        // ListNode* temp = head;
        // vector<int>arr;
        // while(temp){
        //     arr.push_back(temp->val);
        //     temp = temp->next;
        // }
        // temp = head;
        // sort(arr.begin(),arr.end());
        // int i=0;
        // while(temp && i<arr.size()){
        //     temp->val = arr[i];
        //     i++;
        //     temp = temp->next;
        // }
        // return head;

        return mergesort(head);
    }
    private:
    ListNode* getmid(ListNode* head){
        ListNode* prev = nullptr;
        ListNode* fast = head;
        ListNode* slow = head;
        if(!head || !head->next) return head;
        while(fast && fast->next){
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        return prev;
    }

    ListNode* merge(ListNode* left , ListNode* right){
        ListNode* dummy = new ListNode (0);
        ListNode* current = dummy;

        while(left && right){
            if(left->val <= right->val){
                current->next = left;
                left = left->next;
            }else{
                current->next = right;
                right = right->next;
            }
            current = current->next;
        }
        
        if(left){
            current->next = left;
        }else{
            current->next = right;
        }
        return dummy->next;
    }

    ListNode* mergesort(ListNode* head){
        if(!head || !head->next) return head;
        ListNode* mid = getmid(head);
        ListNode* right = mid->next;
        mid->next = nullptr;

        ListNode* leftsorted = mergesort(head);
        ListNode* rightsorted = mergesort(right);

        return merge(leftsorted, rightsorted);
    }

};
