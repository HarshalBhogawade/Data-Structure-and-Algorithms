/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //SelfDone naive : rev-del-rev-return TC : O(3N) notacceptable
        // s1- reverse a ll first o(n)
        // s2- again loop and when encounter cnt == n
        //  free or unlink that node
        // ListNode* curr = head;
        // ListNode* prev = nullptr;
        // while (curr) {
        //     ListNode* temp = curr->next;
        //     curr->next = prev;
        //     prev = curr;
        //     curr = temp;
        // }

        // int cnt = 0;
        // ListNode* dummy = new ListNode(0);
        // ListNode* node = prev; // later useful to again rev list
        // // not tampering temporary head of rev list
        // dummy->next = prev;
        // ListNode* pre = dummy;
        // while (node != nullptr) {
        //     cnt++;
        //     if (cnt == n) {
        //         pre->next = node->next;
        //         break;
        //     }
        //     pre = node;
        //     node = node->next;
        // }

        // // reverse again
        // curr = dummy->next;
        // prev = nullptr;
        // while (curr) {
        //     ListNode* temp = curr->next;
        //     curr->next = prev;
        //     prev = curr;
        //     curr = temp;
        // }
        // return prev;

        //better may be optimal TC: O(2N) still not happy
        // int cnt = 0;
        // ListNode* temp = head;
        // while(temp){
        //     cnt++;
        //     temp = temp->next;
        // }
        // //if head == node to del
        // if(cnt==n){
        //     ListNode* node = head->next;
        //     // free(head);
        //     return node;
        // }
        // int res = cnt - n;
        // temp = head;
        // while(temp){
        //     res--;
        //     if(res==0){
        //         break;
        //     }
        //     temp = temp->next;
        // }
        // ListNode* delnode = temp->next;
        // temp->next = temp->next->next;
        // // free(delnode);
        // return head;


        //optimal:: slow fast ptrs
        //same as better 
        ListNode* fast = head;
        for(int i=0;i<n;i++){
            fast =fast->next;
        }
        if(fast == nullptr){
            head = head->next;
            return head;
        }
        ListNode* slow = head;
        int cnt = 0;
        while(fast->next!=nullptr){
            fast = fast->next;
            slow = slow->next;
        }
        ListNode* delnode = slow->next;
        slow->next = slow->next->next;
        return head;
    }
};