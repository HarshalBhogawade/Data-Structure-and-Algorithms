/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
       //naive approach:(selfdone) TC: O(2N) SC:(2N) Not acceptable
       //s1: go till end of ll and store in array and rev the ll also:
       //s2 : come in rev and store in array 2 at the end check if same or not?
    //    vector<int>arr1;
    //    vector<int>arr2;
    //    ListNode* curr = head;
    //    ListNode* prev = nullptr;
    //    while(curr){
    //         ListNode* temp = curr->next;
    //         arr1.push_back(curr->val);
    //         curr->next = prev;
    //         prev = curr;
    //         curr = temp;
    //    }

    //    while(prev){
    //         arr2.push_back(prev->val);
    //         prev = prev->next;
    //    }
    //    for(int i =0;i<arr1.size();i++){
    //         if(arr1[i]!=arr2[i]) return false;
    //    }
    //    return true;

    //better may be optimal: tc o(2n) sc(N)
    stack<int>st;
    ListNode* temp = head;
    while(temp){
        st.push(temp->val);
        temp = temp->next;
    }
    temp = head;
    while(temp){
        if(st.top()!=temp->val) return false;
        st.pop();
        temp= temp->next;
    }
    return true;
    }

    //ooptimal : najunge
    //this optimal still takes o(2N) but while saving space complexity weare making this algorithm complex
};