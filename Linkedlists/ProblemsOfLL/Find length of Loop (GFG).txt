/*
class Node {
 public:
    int data;
    Node *next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution {
  public:
    int lengthOfLoop(Node *head) {
        // Code here
        
        //brute:: use hashmp
        // unordered_map<Node* , int>mp;
        // Node* temp = head;
        // int cnt = 0;
        // while(temp){
        //     cnt++;
        //     if(mp.find(temp)!=mp.end()){
        //         return cnt-mp[temp];
        //     }
        //     mp[temp]=cnt;
        //     temp = temp->next;
        // }
        // return 0;
        
        //optimal tortoise and hare
        Node* slow = head;
        Node* fast = head;
        
        while(fast!=nullptr&& fast->next!=nullptr){
            fast = fast->next->next;
            slow = slow->next;
            
            if(slow==fast)  break;
            
        }
        if(fast == nullptr || fast->next == nullptr) return 0;
        
        int count =1;
        Node* cnt = slow->next;
        while(cnt!=slow){
            count++;
            cnt=cnt->next;
        }
        return count;
        
        
        
        
        
        
        
    }
};